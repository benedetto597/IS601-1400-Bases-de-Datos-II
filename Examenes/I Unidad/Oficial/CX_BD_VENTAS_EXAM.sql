/*
  @author edgar.benedetto@unah.hn
  @date 19/02/2021
  @version 1.0


  Examen #1 Practico
*/

--- SET SERVEROUTPUT ON;

CREATE TABLE "TBL_EMP_HIST_20171033802" (
    "ID_HIST" NUMBER PRIMARY KEY, 
    "EMP_NO" NUMBER(4,0), 
    "EMP_NAME" VARCHAR2(10),
    "EMP_JOB" VARCHAR2(9),
    "EMP_SAL" NUMBER(7,2),
    "UPDATE_DATE" TIMESTAMP
) ;

--- Secuencia para el trigger 
CREATE SEQUENCE SQ_tblEmpHist_20171033802
START WITH 1
INCREMENT BY 1; 

--- Bloque anonimo 
DECLARE 

  TYPE FILA IS RECORD(
     NO_EMP EMP.EMPNO%TYPE,
     NAME_EMP EMP.ENAME%TYPE,
     JOB_EMP EMP.JOB%TYPE,
     SAL_EMP EMP.SAL%TYPE
   );

   TYPE TABLA_REG_EMP IS TABLE OF FILA INDEX BY PLS_INTEGER;
   
   --- Variable para almacenar todos los registros del Bulk Collect
   DATOS_EMP TABLA_REG_EMP;
   
   --- Variable para recorrer los registros obtenidos
   ITERACION NUMBER(10):= 0;
   
BEGIN
  
   SELECT EMP.EMPNO, EMP.ENAME, EMP.JOB, EMP.SAL BULK COLLECT INTO DATOS_EMP FROM EMP;
   
   WHILE (ITERACION<SQL%ROWCOUNT) LOOP    
    INSERT INTO TBL_EMP_HIST_20171033802 (ID_HIST, EMP_NO, EMP_NAME, EMP_JOB, EMP_SAL) 
    VALUES (SQ_tblEmpHist_20171033802.NEXTVAL, EMP(ITERACION+1).EMP_NO, EMP(ITERACION+1).EMP_NAME, EMP(ITERACION+1).EMP_JOB, EMP(ITERACION+1).EMP_SAL);
    
    COMMIT;
    SAVEPOINT SAFE_BACK;
    
    ITERACION:=ITERACION+1;
   END LOOP;
   
  EXCEPTION 
  
    WHEN DUP_VAL_ON_INDEX THEN
    
       DBMS_OUTPUT.PUT_LINE('EL EMPLEADO NO SE INGRESARA A PORQUE YA EXISTE');
       DBMS_OUTPUT.PUT_LINE('EL CODIGO DEL ERROR ES: '||SQLCODE);
       DBMS_OUTPUT.PUT_LINE('EL MENSAJE DEL ERROR ES: '||SQLERRM);
       ROLLBACK TO SAVEPOINT SAFE_BACK;
       
    WHEN OTHERS THEN
      ROLLBACK TO SAVEPOINT FIRST_RETURN;
END;

--- Trigger para actualizar la fecha en la que se ingreso un registro
CREATE OR REPLACE TRIGGER TG_updateDate_20171033802
AFTER INSERT ON TBL_EMP_HIST_20171033802
FOR EACH ROW
DECLARE
  ID_EMP NUMBER:=SQ_tblEmpHist_20171033802.CURRVAL;
BEGIN
  UPDATE TBL_EMP_HIST_20171033802 SET UPDATE_DATE = SYSTIMESTAMP WHERE ID_HIST = ID_EMP;
END;

--- Inciso #2
DECLARE
  CURSOR datosEmp IS SELECT EMP.EMPNO, EMP.ENAME, EMP.MGR, EMP.HIREDATE --- CAMBIO #1 EMP.
  FROM EMP WHERE TO_CHAR(HIREDATE, 'YYYY')='1981';
  
  TYPE registro IS RECORD(
    numEmp EMP.EMPNO%TYPE, --- CAMBIO #2 NUMBER POR EMP.ENAME
    nameEmp EMP.ENAME%TYPE,       
    jefeEmp EMP.MGR%TYPE,
    fecContrato EMP.HIREDATE%TYPE
  );
  
  registroEmp registro;
BEGIN
  OPEN datosEmp;
  --- CAMBIO #3 COMENTAR
--- FETCH datosEmp INTO registroEmp; 

  LOOP
    FETCH datosEmp INTO registroEmp;
    
    DBMS_OUTPUT.PUT_LINE('EL ID DE EMPLEADO ES: '||registroEmp.numEmp);
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL EMPLEADO ES: '||registroEmp.nameEmp);
    DBMS_OUTPUT.PUT_LINE('EL JEFE DEL EMPLEADO ES: '||registroEmp.jefeEmp);
    DBMS_OUTPUT.PUT_LINE('LA FECHA DEL CONTRATO DEL EMPLEADO ES: '||registroEmp.fecContrato);
    DBMS_OUTPUT.PUT_LINE(CHR(13)); --CAMBIO DE LINEA
    
    EXIT WHEN datosEmp%NOTFOUND; ---CAMBIO #4 NOT
  END LOOP;
  
  CLOSE datosEmp;
END;

---Inciso #3
CREATE TABLE "TBL_EMP_LOG_20171033802" (
    "ID_LOG" NUMBER PRIMARY KEY, 
    "DESCRIPCION_LOG" VARCHAR2(200), 
    "TIPO_OPERACION" VARCHAR2(50),
    "TABLA_AFECTADA" VARCHAR2(200),
    "FECHA_LOG" TIMESTAMP,
    "USUARIO" VARCHAR2(50)
) ;

--- Secuencia para e{ trigger 
CREATE SEQUENCE SQ_tblEmpLog_20171033802
START WITH 1
INCREMENT BY 1; 

CREATE OR REPLACE TRIGGER TG_logEmp_20171033802
AFTER INSERT OR UPDATE OR DELETE ON EMP
FOR EACH ROW
BEGIN
  IF (INSERTING) THEN
    INSERT INTO TBL_EMP_LOG_20171033802 VALUES(SQ_tblEmpLog_20171033802.NEXTVAL, 'SE REALIZO LA OPERACION DE INSERT', 'INSERT', 'TBL_EMP_LOG_20171033802', SYSTIMESTAMP, USER);
  END IF;
  IF (UPDATING) THEN
    INSERT INTO TBL_EMP_LOG_20171033802 VALUES (SQ_tblEmpLog_20171033802.NEXTVAL, 'SE REALIZO LA OPERACION DE UPDATE', 'UPDATE', 'TBL_EMP_LOG_20171033802', SYSTIMESTAMP, USER);
  END IF;
  IF (DELETING) THEN
    INSERT INTO TBL_EMP_LOG_20171033802 VALUES (SQ_tblEmpLog_20171033802.NEXTVAL, 'SE REALIZO LA OPERACION DE DELETE', 'DELETE', 'TBL_EMP_LOG_20171033802', SYSTIMESTAMP, USER);
  END IF;
END;
BEGIN 
  INSERT INTO EMP VALUES (7935, 'JOE', 'ANALYST', 7839, '15-NOV-82', 6600, 200, 10 );
  COMMIT;
END;

--- Inciso #4 
DECLARE 
   CURSOR CDATOS_STATES IS SELECT DEMO_STATES.STATE_NAME, SUBSTR(STATE_NAME, 1, 1) INITIAL_LETTER FROM DEMO_STATES WHERE (SUBSTR(STATE_NAME, 1, 1) = 'C') OR (SUBSTR(STATE_NAME, 1, 1) = 'N');
   
   --- Uniendo las 3 variables en una sola
   REGISTRO CDATOS_STATES%ROWTYPE;
   
BEGIN
  OPEN CDATOS_STATES;
  FETCH CDATOS_STATES INTO REGISTRO; 

  WHILE (CDATOS_STATES%FOUND)LOOP 
    
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL ESTADO ES: '||REGISTRO.STATE_NAME);
    DBMS_OUTPUT.PUT_LINE('LA INICIAL DEL ESTADO ES: '||REGISTRO.INITIAL_LETTER);
    
    --- Salto de linea 
    DBMS_OUTPUT.PUT_LINE(CHR(13));
   FETCH CDATOS_STATES INTO REGISTRO; 

  END LOOP;
  
  CLOSE CDATOS_STATES;  
END;

