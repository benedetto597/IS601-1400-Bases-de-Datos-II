--- Inciso #7
CREATE TABLE "COCHES"(
  "MAT" VARCHAR2(8) PRIMARY KEY,
  "MARCA"  VARCHAR2(15),
  "MODELO" VARCHAR2(15),
  "AN_FAB"  NUMBER(4),
  "ESTADO" NUMBER(1)
);

CREATE TABLE "MECANICOS"(
  "DNI" VARCHAR2(9) PRIMARY KEY,
  "NOMBRE" VARCHAR2(15),
  "PUESTO" VARCHAR2(15),
  "AN_FAB"  NUMBER(4),
  "ESTADO" NUMBER(1)
);

CREATE TABLE "TRABAJOS"(
  "MAT" VARCHAR2(8) PRIMARY KEY,
  "DNI" VARCHAR2(9),
  "HORAS" NUMBER(3,1) CONSTRAINT CK_TRABAJO CHECK (HORAS>=0.5),
  "FECHA_REP" DATE,
  "ESTADO" NUMBER(1),
  CONSTRAINT FK1_TRABAJOS FOREIGN KEY (MAT) REFERENCES COCHES (MAT),
  CONSTRAINT FK2_TRABAJOS FOREIGN KEY (DNI) REFERENCES MECANICOS (DNI)  
);

--- Inciso #8
CREATE TABLE "LOGS"(
  "ID" NUMBER PRIMARY KEY,
  "NOMBRE_USUARIO" VARCHAR2(50),
  "FECHA_MOD" DATE,
  "DESCRIPCION"  VARCHAR2(100),
  "ESTADO" NUMBER(1)
);

--- Inciso #9 Agregar el campo de estado
--- Inciso #10 DDL PENDIENTE
DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  ALTER TABLE COCHES ADD ESTADO NUMBER(1);
  DBMS_OUTPUT.PUT_LINE(SQLERRM);
  COMMIT;
  ALTER TABLE COCHES ADD LOGS NUMBER(1);
  COMMIT;
  ALTER TABLE COCHES ADD MECANICOS NUMBER(1);
  COMMIT;
  ALTER TABLE COCHES ADD TRABAJOS NUMBER(1);
  COMMIT;
END;

--- Inciso #11
DECLARE 
  --- Cursor para los estados de tablas relacionadas
   CURSOR CDATOS1_ESTADOS IS SELECT COCHES.ESTADO ESTADO_COCHE, COCHES.MAT, MECANICOS.ESTADO ESTADO_MECANICOS, MECANICOS.DNI,
   TRABAJOS.ESTADO ESTADO_TRABAJOS FROM TRABAJOS INNER JOIN COCHES ON COCHES.MAT = TRABAJOS.MAT 
   INNER JOIN MECANICOS ON MECANICOS.DNI = TRABAJOS.DNI;
   
   --- Cursor para la tabla de bitacora
   CURSOR CDATOS2_ESTADOS IS SELECT ESTADO, NOMBRE_USUARIO FROM LOGS;
   
   REGISTRO1 CDATOS1_ESTADOS%ROWTYPE;

   REGISTRO2 CDATOS2_ESTADOS%ROWTYPE;
   
BEGIN
  OPEN CDATOS1_ESTADOS;
  
  LOOP 
    FETCH CDATOS1_ESTADOS INTO REGISTRO1;
    
    EXIT WHEN CDATOS1_ESTADOS%NOTFOUND;
      --- Actualizar el estado usando los datos obtenidos por los cursores dado que las tablas no tienen 
      --- un campo autoincremental numerido como primary key
      UPDATE COCHES SET ESTADO = 1 WHERE COCHES.MAT = REGISTRO1.MAT;
      UPDATE MECANICOS SET ESTADO = 1 WHERE MECANICOS.DNI = REGISTRO1.DNI;
      UPDATE TRABAJOS SET ESTADO = 1 WHERE TRABAJOS.MAT = REGISTRO1.MAT;
    
  END LOOP;
  CLOSE CDATOS1_ESTADOS; 
  OPEN CDATOS2_ESTADOS;
  LOOP 
    FETCH  CDATOS2_ESTADOS INTO REGISTRO2;
    
    EXIT WHEN CDATOS2_ESTADOS%NOTFOUND;
    
      UPDATE LOGS SET ESTADO = 1 WHERE LOGS.NOMBRE_USUARIO = REGISTRO2.NOMBRE_USUARIO;
    
  END LOOP;
  CLOSE CDATOS2_ESTADOS; 
END;

--- Inciso #12 Secuencia que va de 3 en 3, empezando en 1 y teniendo como valor max 1000 y min 1
CREATE SEQUENCE SQ_TABLA_LOGS 
START WITH 1
MAXVALUE 1000
MINVALUE 1
INCREMENT BY 3;