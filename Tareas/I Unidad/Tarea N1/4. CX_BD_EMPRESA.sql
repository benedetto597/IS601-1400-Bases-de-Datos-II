/*
  @author edgar.benedetto@unah.hn
  @date 16/02/2021
  @version 1.0
  
  Tarea N1 
  Docente: Emilson Omar Acosta
  Alumno: Edgar Josué Benedetto Godoy
  Num. de cuenta: 20171033802
*/

--- Inciso #1
--- Secuencia autoincrementable de 2 en 2 para cada tabla
CREATE SEQUENCE SQ_TABLA_COUNTRIES
START WITH 20
INCREMENT BY 2; 

CREATE SEQUENCE SQ_TABLA_DEPARTMENTS
START WITH 20
INCREMENT BY 2;

CREATE SEQUENCE SQ_TABLA_EMPLOYEES
START WITH 20
INCREMENT BY 2;

/* 
No se puede insertar en la tabla Jobs usando la secuencia porque la tabla 
  tiene como llave principal un campo que acepta texto (varchar2)

CREATE SEQUENCE SQ_TABLA_JOBS
START WITH 20
INCREMENT BY 2;
*/

CREATE SEQUENCE SQ_TABLA_LOCATIONS
START WITH 20
INCREMENT BY 2; 

CREATE SEQUENCE SQ_TABLA_REGIONS
START WITH 20
INCREMENT BY 2; 

--- Insersion de valores en las tablas para probar secuencias usando NEXTVAL
INSERT INTO COUNTRIES VALUES(SQ_TABLA_COUNTRIES.NEXTVAL, 'Honduras','2');
INSERT INTO COUNTRIES VALUES(SQ_TABLA_COUNTRIES.NEXTVAL, 'Guatemala','2');

INSERT INTO DEPARTMENTS VALUES(SQ_TABLA_DEPARTMENTS.NEXTVAL, 'HHRR','201', '1400');
INSERT INTO DEPARTMENTS VALUES(SQ_TABLA_DEPARTMENTS.NEXTVAL, 'Logistics','124', '1500');

INSERT INTO EMPLOYEES VALUES(SQ_TABLA_EMPLOYEES.NEXTVAL, 'Edgar','Benedetto', 'GOAT','525.365.4988', '15-JUL-89', 'SA_MAN', '2300', '0.1', '101', '50');
INSERT INTO EMPLOYEES VALUES(SQ_TABLA_EMPLOYEES.NEXTVAL, 'Rosa','Godoy', 'BEIGLE','530.255.1578', '23-NOV-91', 'IT_PROG', '5300', '0.3', '124', '60');

INSERT INTO LOCATIONS VALUES(SQ_TABLA_LOCATIONS.NEXTVAL, '505 California Rd Street','88185', 'Miami','California', 'US');
INSERT INTO LOCATIONS VALUES(SQ_TABLA_LOCATIONS.NEXTVAL, '102 Kansas Corner Str','66548', 'Kansas','Kansas City', 'US');

INSERT INTO REGIONS VALUES(SQ_TABLA_REGIONS.NEXTVAL, 'Oceania');
INSERT INTO REGIONS VALUES(SQ_TABLA_REGIONS.NEXTVAL, 'Antartica');

--- Inciso #2
--- Bloque anonimo JOB_ID,JOB_TITLE, MIN_SALARY, MAX_SALARY, DEPARTMENT_ID, DEPARTMENT_NAME, START_DATE, END_DATE y NOMBRE COMPLETO del empleado
SET SERVEROUTPUT ON;

DECLARE 
  
  CURSOR CDATOS_EMPLEADO IS SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, EMPLOYEES.JOB_ID, EMPLOYEES.DEPARTMENT_ID, JOBS.JOB_TITLE, JOBS.MIN_SALARY, JOBS.MAX_SALARY, DEPARTMENTS.DEPARTMENT_NAME, JOB_HISTORY.START_DATE, JOB_HISTORY.END_DATE  FROM EMPLOYEES  INNER JOIN JOBS ON EMPLOYEES.JOB_ID = JOBS.JOB_ID  INNER JOIN JOB_HISTORY ON EMPLOYEES.EMPLOYEE_ID = JOB_HISTORY.EMPLOYEE_ID  INNER JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;
   
  REGISTRO CDATOS_EMPLEADO%ROWTYPE;
  
BEGIN 

  DBMS_OUTPUT.PUT_LINE('Prcedure');
  OPEN CDATOS_EMPLEADO;
  
  LOOP 
    FETCH CDATOS_EMPLEADO INTO REGISTRO; 
    
    EXIT WHEN CDATOS_EMPLEADO%NOTFOUND;
    
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL EMPLEADO ES: '||REGISTRO.FIRST_NAME||REGISTRO.LAST_NAME);
    DBMS_OUTPUT.PUT_LINE('EL ID DEL TRABAJO DEL EMPLEADO ES DEL: '||REGISTRO.JOB_ID);
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL TRABAJO DEL EMPLEADO ES: '||REGISTRO.JOB_TITLE);
    DBMS_OUTPUT.PUT_LINE('EL SALARIO MINIMO DEL EMPLEADO ES: '||REGISTRO.MIN_SALARY);
    DBMS_OUTPUT.PUT_LINE('EL SALARIO MAXIMO DEL EMPLEADO ES: '||REGISTRO.MAX_SALARY);
    DBMS_OUTPUT.PUT_LINE('EL ID DEL DEPARTAMENTO DEL EMPLEADO ES: '||REGISTRO.DEPARTMENT_ID);
    DBMS_OUTPUT.PUT_LINE('EL NOMBRE DEL DEPARTAMENTO DEL EMPLEADO ES: '||REGISTRO.DEPARTMENT_NAME);
    DBMS_OUTPUT.PUT_LINE('LA FECHA DE CONTRATACION DEL EMPLEADO ES: '||REGISTRO.START_DATE);
    DBMS_OUTPUT.PUT_LINE('LA FECHA DE FINALIZACION DE CONTRATO DEL EMPLEADO ES: '||REGISTRO.END_DATE);
    
    --- Salto de linea 
    DBMS_OUTPUT.PUT_LINE(CHR(13));
  END LOOP;
  
  CLOSE CDATOS_EMPLEADO;  
  
END;

--- Inciso #3 
--- Creacion de tabla REGISTRO_LOG


CREATE TABLE "REGISTRO_LOG" (
    "ID_LOG" NUMBER PRIMARY KEY, 
    "DESCRIPCION_LOG" VARCHAR2(200), 
    "TIPO_OPERACION" VARCHAR2(50),
    "TABLA_AFECTADA" VARCHAR2(200),
    "FECHA_LOG" TIMESTAMP,
    "USUARIO" VARCHAR2(50)
) ;

CREATE TABLE "TABLA_TEST" (
    "ID_TEST" NUMBER PRIMARY KEY, 
    "TEST_DESC" VARCHAR2(200) 
) ;

--- Secuencia para e{ trigger 
CREATE SEQUENCE SQ_TABLA_REGISTRO
START WITH 1
INCREMENT BY 3; 

CREATE OR REPLACE TRIGGER TG_SQ_TABLA_REGISTRO
AFTER INSERT OR UPDATE OR DELETE ON TABLA_TEST
FOR EACH ROW
BEGIN
  IF (INSERTING) THEN
    INSERT INTO REGISTRO_LOG VALUES(SQ_TABLA_REGISTRO.NEXTVAL, 'SE REALIZO LA OPERACION DE INSERT', 'INSERT', 'TABLA_TEST', SYSTIMESTAMP, USER);
  END IF;
  IF (UPDATING) THEN
    INSERT INTO REGISTRO_LOG VALUES (SQ_TABLA_REGISTRO.NEXTVAL, 'SE REALIZO LA OPERACION DE UPDATE', 'UPDATE', 'TABLA_TEST', SYSTIMESTAMP, USER);
  END IF;
  IF (DELETING) THEN
    INSERT INTO REGISTRO_LOG VALUES (SQ_TABLA_REGISTRO.NEXTVAL, 'SE REALIZO LA OPERACION DE DELETE', 'DELETE', 'TABLA_TEST', SYSTIMESTAMP, USER);
  END IF;
END;

BEGIN 
  INSERT INTO TABLA_TEST VALUES (1, 'PROBANDO EL INSERT');
  INSERT INTO TABLA_TEST VALUES (2, 'PROBANDO EL INSERT 1');
  INSERT INTO TABLA_TEST VALUES (3, 'PROBANDO EL INSERT 2');
  INSERT INTO TABLA_TEST VALUES (4, 'PROBANDO EL INSERT 3');
  UPDATE TABLA_TEST SET TEST_DESC='PROBANDO UPDATE' WHERE ID_TEST=1;
  DELETE FROM TABLA_TEST WHERE ID_TEST=1;
  COMMIT;
END;

--- Inciso #4
--- Tres triggers para solucionar errores
 
/* 
Trigger #1
  La transaccion autonoma divide la transaccion global en varias transacciones
*/
CREATE OR REPLACE TRIGGER tblEmp_Insert
AFTER INSERT ON EMPLOYEES
FOR EACH ROW
DECLARE 
  PRAGMA AUTONOMOUS_TRANSACTION; --- CAMBIO #1
BEGIN
  INSERT INTO REGISTRO_LOG VALUES (SQ_TABLA_REGISTRO.NEXTVAL, 'SE INSERTÓ UN NUEVO
  REGISTRO EN LA TABLA EMPLEADOS','INSERT','EMPLEADOS', SYSDATE, USER);
  COMMIT;
 
  EXCEPTION
    WHEN OTHERS THEN --- CAMBIO #2
      ROLLBACK; --- CAMBIO #3 
END;

BEGIN 
  INSERT INTO EMPLOYEES VALUES (SQ_TABLA_EMPLOYEES.NEXTVAL, 'Sofia','Valladares', 'PINAPLE','522.665.5633', '15-JAN-88', 'AD_VP', '22300', '0.1', '101', '60');
  COMMIT;
END;

--- Trigger #2
CREATE OR REPLACE TRIGGER tblDepts_Update
BEFORE UPDATE ON DEPARTMENTS --- Cambio #1 Faltaba la T en DEPARMENTS
FOR EACH ROW
BEGIN
  INSERT INTO REGISTRO_LOG (ID_LOG, DESCRIPCION_LOG, TIPO_OPERACION, 
  TABLA_AFECTADA,FECHA_LOG, USUARIO) VALUES (SQ_TABLA_REGISTRO.NEXTVAL, 'SE ACTUALIZÓ UN
  REGISTRO EN LA TABLA DEPARTMENTS','UPDATE', 'DEPARTMENTS', SYSDATE, USER); --- Cambio #2 USERS, cambio #3 comillas en DEPARTMENTS y Cambio #4 se agrego la secuencia SQ_TABLA_REGISTRO.NEXTVAL y el ID_LOG
END; 

BEGIN 
  UPDATE DEPARTMENTS SET MANAGER_ID='200' WHERE DEPARTMENT_ID=22;
  COMMIT;
END;

CREATE OR REPLACE TRIGGER tblJobHistory_Delete --- Cambio #1 se agrego Delete al nombre del trigger
BEFORE DELETE ON JOB_HISTORY
FOR EACH ROW
BEGIN
  INSERT INTO REGISTRO_LOG (ID_LOG, DESCRIPCION_LOG, TIPO_OPERACION, 
  TABLA_AFECTADA,FECHA_LOG, USUARIO) VALUES (SQ_TABLA_REGISTRO.NEXTVAL, 'SE ELIMINÓ UN
  REGISTRO EN LA TABLA JOB_HISTORY','DELETE', 'JOB_HISTORY', SYSDATE, USER); --- Cambio #2 se agrego la secuencia SQ_TABLA_REGISTRO.NEXTVAL y el ID_LOG y Cambio #3 se agregaron comillas a DELETE
END;

BEGIN 
  DELETE FROM JOB_HISTORY WHERE EMPLOYEE_ID=124;
END;



